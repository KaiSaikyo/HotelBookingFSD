@inject HttpClient _client

<PageTitle>RoomScout.Org - Update Bookings</PageTitle>

<div class="main-background">
	<div class="form-background">
		<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">
				<label>Check-in: </label>
				<div>
					<InputDate @bind-Value="@booking.CheckInDate" class="form-control" />
					<ValidationMessage For="@(() => booking.CheckInDate)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Check-out: </label>
				<div>
					<InputDate @bind-Value="@booking.CheckOutDate" class="form-control" />
					<ValidationMessage For="@(() => booking.CheckOutDate)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Destination: </label>
				<div>
					<InputText @bind-Value="@booking.Destination" class="form-control" />
					<ValidationMessage For="@(() => booking.Destination)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>No. of Guest: </label>
				<div>
					<InputNumber @bind-Value="@booking.NumGuest" class="form-control" />
					<ValidationMessage For="@(() => booking.NumGuest)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Status: </label>
				<div>
					<InputSelect @bind-Value="@booking.Status" class="form-control">
						<option value="">-- Select Status --</option>
						<option value="true">True</option>
						<option value="false">False</option>
					</InputSelect>
					<ValidationMessage For="@(() => booking.Status)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Hotel: </label>
				<div>
					<InputSelect @bind-Value="@booking.HotelId" class="form-control">
						<option value="">-- Select Hotel --</option>
						@if (Hotels != null)
						{
							foreach (var hotel in Hotels)
							{
								<option value="@hotel.Id">@hotel.Name - @hotel.Rating</option>
							}
						}
					</InputSelect>
					<ValidationMessage For="@(() => booking.HotelId)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Room Type: </label>
				<div>
					<InputSelect @bind-Value="@booking.RoomTypeId" class="form-control">
						<option value="">-- Select Room Type --</option>
						@if (RoomTypes != null)
						{
							foreach (var roomtype in RoomTypes)
							{
								<option value="@roomtype.Id">@roomtype.Description - $@roomtype.Price</option>
							}
						}
					</InputSelect>
					<ValidationMessage For="@(() => booking.RoomTypeId)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Staff: </label>
				<div>
					<InputSelect @bind-Value="@booking.StaffId" class="form-control">
						<option value="">-- Select Staff --</option>
						@if (Staffs != null)
						{
							foreach (var staff in Staffs)
							{
								<option value="@staff.Id">@staff.Name</option>
							}
						}
					</InputSelect>
					<ValidationMessage For="@(() => booking.StaffId)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Customer: </label>
				<div>
					<InputSelect @bind-Value="@booking.CustomerId" class="form-control">
						<option value="">-- Select Customer --</option>
						@if (Customers != null)
						{
							foreach (var customer in Customers)
							{
								<option value="@customer.Id">@customer.Name</option>
							}
						}
					</InputSelect>
					<ValidationMessage For="@(() => booking.CustomerId)" />
				</div>
			</div>
			<br />
			<div class="button-wrapper">
				<button type="submit" class="left-aligned-button">
					@ButtonText
				</button>
			</div>
		</EditForm>
	</div>
</div>

@code {
	[Parameter] public Booking? booking { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Hotel>? Hotels;
	private IList<RoomType>? RoomTypes;
	private IList<Staff>? Staffs;
	private IList<Customer>? Customers;

	protected async override Task OnInitializedAsync()
	{
		Hotels = await _client.GetFromJsonAsync<List<Hotel>>($"{Endpoints.HotelsEndpoint}");
		RoomTypes = await _client.GetFromJsonAsync<List<RoomType>>($"{Endpoints.RoomTypesEndpoint}");
		Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	}
}