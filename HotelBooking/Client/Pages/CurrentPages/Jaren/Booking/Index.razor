@page "/booking"
@page "/booking/{destination}/{hotel}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<PageTitle>RoomScout.Org - Bookings</PageTitle>


@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <div class="main-background">
        <div class="button-wrapper">
            <a href="/booking/create" class="right-aligned-button nav-link">
                Create Booking
            </a>
        </div>
        <div class="table-background">
            <table class="table table-responsive" id="bookingsTable">
                <thead>
                    <tr>
                        <th style="border-top-left-radius: 0.5rem;">ID</th>
                        <th>Booking Details</th>
                        <th>Check-in/out</th>
                        <th>Price</th>
                        <th>No. Guests</th>
                        <th>Customer Name</th>
                        <th>Staff Name</th>
                        <th>Status</th>
                        <th style="border-top-right-radius: 0.5rem;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in FilteredBookings)
                    {
                        <tr>
                            <td><b>@booking.Id</b></td>
                            <td>
                                <b>@booking.Hotel.Name</b>
                                <br />
                                <b>@booking.Destination</b>
                                <br />
                                <b>Rating - @booking.Hotel.Rating</b>
                                <img src="@booking.Hotel.ImagePath" alt="Uploaded Img" class="scaled-image" />
                            </td>
                            <td>
                                <b>Check-in: @booking.CheckInDate.ToString().Split()[0]</b>
                                <br />
                                <b>Check-out: @booking.CheckOutDate.ToString().Split()[0]</b>
                            </td>
                            <td>
                                <b>@booking.RoomType.Description</b>
                                <br />
                                <b>Price - $@booking.RoomType.Price</b>
                            </td>
                            <td><b>@booking.NumGuest</b></td>
                            <td><b>@booking.Customer.Name</b></td>
                            <td><b>@booking.Staff.Name</b></td>
                            <td><b>@booking.Status</b></td>
                            <td>
                                <div id="button-container" style="display: flex; flex-direction: row; gap: 0.2rem;">
                                    <a href="/booking/view/@booking.Id" class="btn btn-view">
                                        <span class="oi oi-magnifying-glass"></span>
                                    </a>

                                    <a href="/booking/edit/@booking.Id" class="btn btn-edit">
                                        <span class="oi oi-script"></span>
                                    </a>

                                    <button class="btn btn-delete" @onclick="@(()=>Delete(booking.Id))">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Booking>? Bookings;
    private List<Booking>? FilteredBookings;
    [Parameter] public string? destination { get; set; }
    [Parameter] public string? hotel { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
        ApplyFilter();
    }

    async Task Delete(int bookingId)
    {
        if (Bookings != null)
        {
            var booking = Bookings.First(q => q.Id == bookingId);

            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Destination}?");

            if (confirm)
            {
                var stayExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.StaysEndpoint}/booking/{bookingId}");
                if (stayExists)
                {
                    await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Stays.");
                    return;
                }
                else
                {
                    await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
                    await OnInitializedAsync();
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
        _interceptor.DisposeEvent();
    }

    private void ApplyFilter()
    {
        if (Bookings != null)
        {
            FilteredBookings = Bookings.Where(b =>
                (string.IsNullOrEmpty(destination) || b.Destination.Contains(destination, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(hotel) || b.Hotel.Name.Contains(hotel, StringComparison.OrdinalIgnoreCase))).ToList();
        }
    }
}