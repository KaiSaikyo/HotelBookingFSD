@page "/review"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<PageTitle>RoomScout.Org - Reviews</PageTitle>

@if (Reviews == null)
{
	<div class="alert alert-info">Loading Reviews...</div>
}
else
{
	<div class="main-background">
		<div class="button-wrapper">
			<a href="/review/create" class="right-aligned-button nav-link">
				Create Review
			</a>
		</div>
		<div class="table-background">
			<table class="table table-responsive" id="reviewsTable">
				<thead>
					<tr>
						<th style="border-top-left-radius: 0.5rem;">ID</th>
						<th>Rating</th>
						<th>Description</th>
						<th>Date</th>
						<th>Name</th>
						<th>Complimentary Services</th>
						<th style="border-top-right-radius: 0.5rem;">Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var review in Reviews)
					{
						<tr>
							<td><b>@review.Id</b></td>
							<td><b>@review.Rating</b></td>
							<td><b>@review.Description</b></td>
							<td><b>@review.Date</b></td>
							<td><b>@review.Customer.Name</b></td>
							<td><b>@review.Stay.ComplimentaryServices</b></td>

							<td>
								<a href="/review/view/@review.Id" class="btn btn-primary">
									<span class="oi oi-magnifying-glass"></span>
								</a>

								<a href="/review/edit/@review.Id" class="btn btn-warning">
									<span class="oi oi-script"></span>
								</a>

								<button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
									<span class="oi oi-trash"></span>
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private List<Review>? Reviews;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
	}

	async Task Delete(int reviewId)
	{
		if (Reviews != null)
		{
			var review = Reviews.First(q => q.Id == reviewId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Rating}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
				await OnInitializedAsync();
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#reviewsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
		_interceptor.DisposeEvent();
	}
}