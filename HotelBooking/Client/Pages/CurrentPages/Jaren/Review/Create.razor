@page "/review/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<PageTitle>RoomScout.Org - Create Reviews</PageTitle>

<div class="main-background">
	<div class="form-background">
		<EditForm Model="@review" OnValidSubmit="CreateReview">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">
				<label>Rating: </label>
				<div>
					<InputNumber @bind-Value="@review.Rating" class="form-control" />
					<ValidationMessage For="@(() => review.Rating)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Description: </label>
				<div>
					<InputTextArea @bind-Value="@review.Description" class="form-control" />
					<ValidationMessage For="@(() => review.Description)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Date: </label>
				<div>
					<InputDate @bind-Value="@review.Date" class="form-control" />
					<ValidationMessage For="@(() => review.Date)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Customer: </label>
				<div>
					<InputSelect @bind-Value="@review.CustomerId" class="form-control">
						<option value="">-- Select Customer --</option>
						@if (Customers != null)
						{
							foreach (var customer in Customers)
							{
								<option value="@customer.Id">@customer.Name</option>
							}
						}
					</InputSelect>
					<ValidationMessage For="@(() => review.CustomerId)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Stay: </label>
				<div>
					<InputSelect @bind-Value="@review.StayId" class="form-control">
						<option value="">-- Select Stay --</option>
						@if (Stays != null)
						{
							foreach (var stay in Stays)
							{
								<option value="@stay.Id">@stay.ComplimentaryServices</option>
							}
						}
					</InputSelect>
					<ValidationMessage For="@(() => review.StayId)" />
				</div>
			</div>
			<br />
			<div class="button-wrapper">
				<button type="submit" class="left-aligned-button">
					Create Review
				</button>
			</div>
		</EditForm>
	</div>
</div>

@code {
	private Review review = new Review();

	private IList<Customer>? Customers;
	private IList<Stay>? Stays;

	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		Stays = await _client.GetFromJsonAsync<List<Stay>>($"{Endpoints.StaysEndpoint}");
	}

	private async Task CreateReview()
	{
		await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
		_navManager.NavigateTo("/review/");
	}
}