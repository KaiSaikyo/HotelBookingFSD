@using HotelBooking.Client.Components
@inject HttpClient _client

<PageTitle>RoomScout.Org - Update Stays</PageTitle>

<div class="main-background">
	<div class="form-background">
		<EditForm Model="@stay" OnValidSubmit="@OnValidSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<fieldset disabled="@Disabled">
				<div class="form-group">
					<label>Emergency Contact: </label>
					<div>
						<InputText @bind-Value="@stay.EmergencyContact" class="form-control" />
						<ValidationMessage For="@(() => stay.EmergencyContact)" />
					</div>
				</div>
				<br />
				<div class="form-group">
					<label>Occupancy Status: </label>
					<div>
						<InputSelect @bind-Value="@stay.OccupancyStatus" class="form-control">
							<option value="">-- Select Occupancy Status --</option>
							<option value="true">True</option>
							<option value="false">False</option>
						</InputSelect>
						<ValidationMessage For="@(() => stay.OccupancyStatus)" />
					</div>
				</div>
				<br />
				<div class="form-group">
					<label>Complimentry Services: </label>
					<div>
						<InputTextArea @bind-Value="@stay.ComplimentaryServices" class="form-control" />
						<ValidationMessage For="@(() => stay.ComplimentaryServices)" />
					</div>
				</div>
				<br />
				<div class="form-group">
					<label>Booking: </label>
					<div>
						<InputSelect @bind-Value="@stay.BookingId" class="form-control">
							<option value="">-- Select Booking --</option>
							@if (Bookings != null)
							{
								foreach (var booking in Bookings)
								{
									<option value="@booking.Id">@booking.Destination, Check-in: @booking.CheckInDate, Check-out: @booking.CheckOutDate</option>
								}
							}
						</InputSelect>
						<ValidationMessage For="@(() => stay.BookingId)" />
					</div>
				</div>
				<br />
				<div class="form-group">
					<label>Room: </label>
					<div>
						<InputSelect @bind-Value="@stay.RoomId" class="form-control">
							<option value="">-- Select Room --</option>
							@if (Rooms != null)
							{
								foreach (var room in Rooms)
								{
									<option value="@room.Id">@room.Number, Min Stay: @room.RoomMinStay, Max Stay: @room.RoomMaxStay</option>
								}
							}
						</InputSelect>
						<ValidationMessage For="@(() => stay.RoomId)" />
					</div>
				</div>
			</fieldset>
			@if (!Disabled)
			{
				<br />
				<div class="button-wrapper">
					<button type="submit" class="left-aligned-button">
						@ButtonText
					</button>
				</div>
			}
			<BackToList Target="stay" />
		</EditForm>
	</div>
</div>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Stay? stay { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Booking>? Bookings;
	private IList<Room>? Rooms;

	protected async override Task OnInitializedAsync()
	{
		Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
		Rooms = await _client.GetFromJsonAsync<List<Room>>($"{Endpoints.RoomsEndpoint}");
	}
}
