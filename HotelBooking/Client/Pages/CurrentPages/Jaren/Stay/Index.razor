@page "/stay"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<PageTitle>RoomScout.Org - Stays</PageTitle>

@if (Stays == null)
{
    <div class="alert alert-info">Loading Stays...</div>
}
else
{
    <div class="main-background">
        <div class="button-wrapper">
            <a href="/stay/create" class="right-aligned-button nav-link">
                Create Stay
            </a>
        </div>
        <div class="table-background">
            <table class="table table-responsive" id="staysTable">
                <thead>
                    <tr>
                        <th style="border-top-left-radius: 0.5rem;">ID</th>
                        <th>Emergency Contact</th>
                        <th>Occupancy Status</th>
                        <th>Complimentary Services</th>
                        <th>Booking Details</th>
                        <th>Room Number</th>
                        <th style="border-top-right-radius: 0.5rem;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stay in Stays)
                    {
                        <tr>
                            <td><b>@stay.Id</b></td>
                            <td><b>@stay.EmergencyContact</b></td>
                            <td><b>@stay.OccupancyStatus</b></td>
                            <td><b>@stay.ComplimentaryServices</b></td>
                            <td>
                                <b>@stay.Booking.Destination</b><br />
                                <b>Check-in: @stay.Booking.CheckInDate.ToString().Split()[0]</b><br />
                                <b>Check-out: @stay.Booking.CheckOutDate.ToString().Split()[0]</b>
                            </td>
                            <td><b>@stay.Room.Number<br />Min Stay: @stay.Room.RoomMinStay<br />Max Stay: @stay.Room.RoomMaxStay</b></td>

                            <td>
                                <div id="button-container" style="display: flex; flex-direction: row; gap: 0.2rem;">
                                    <a href="/stay/view/@stay.Id" class="btn btn-view">
                                        <span class="oi oi-magnifying-glass"></span>
                                    </a>

                                    <a href="/stay/edit/@stay.Id" class="btn btn-edit">
                                        <span class="oi oi-script"></span>
                                    </a>

                                    <button class="btn btn-delete" @onclick="@(()=>Delete(stay.Id))">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Stay>? Stays;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Stays = await _client.GetFromJsonAsync<List<Stay>>($"{Endpoints.StaysEndpoint}");
    }

    async Task Delete(int stayId)
    {
        if (Stays != null)
        {
            var stay = Stays.First(q => q.Id == stayId);

            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {stay.EmergencyContact}?");

            if (confirm)
            {
                var reviewExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.ReviewsEndpoint}/stay/{stayId}");
                if (reviewExists)
                {
                    await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Reviews.");
                    return;
                }
                else
                {
                    await _client.DeleteAsync($"{Endpoints.StaysEndpoint}/{stayId}");
                    await OnInitializedAsync();
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#staysTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#staysTable");
        _interceptor.DisposeEvent();
    }
}