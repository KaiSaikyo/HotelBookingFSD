@page "/roomtype"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor

<PageTitle>RoomScout.Org - Room Types</PageTitle>

@if (RoomTypes == null)
{
	<div class="alert alert-info">Loading Room Types...</div>
}
else
{
	<div class="main-background">
		<div class="button-wrapper">
			<a href="/roomtype/create" class="right-aligned-button nav-link">
				Create Room Type
			</a>
		</div>
		<div class="table-background">
			<table class="table table-responsive" id="typesTable">
				<thead>
					<tr>
						<th style="border-top-left-radius: 0.5rem;">ID</th>
						<th>Description</th>
						<th>Size</th>
						<th>Price</th>
						<th>Hotel Rating</th>
						<th style="border-top-right-radius: 0.5rem;">Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var roomtype in RoomTypes)
					{
						<tr>
							<td><b>@roomtype.Id</b></td>
							<td><b>@roomtype.Description</b></td>
							<td><b>@roomtype.Size</b></td>
							<td><b>$@roomtype.Price</b></td>
							<td><b>@roomtype.Hotel.Name<br />Rating - @roomtype.Hotel.Rating</b></td>

							<td>
								<div id="button-container" style="display: flex; flex-direction: row; gap: 0.2rem;">
									<a href="/roomtype/view/@roomtype.Id" class="btn btn-view">
										<span class="oi oi-magnifying-glass"></span>
									</a>

									<a href="/roomtype/edit/@roomtype.Id" class="btn btn-edit">
										<span class="oi oi-script"></span>
									</a>

									<button class="btn btn-delete" @onclick="@(()=>Delete(roomtype.Id))">
										<span class="oi oi-trash"></span>
									</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private List<RoomType>? RoomTypes;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		RoomTypes = await _client.GetFromJsonAsync<List<RoomType>>($"{Endpoints.RoomTypesEndpoint}");
	}

	async Task Delete(int roomtypeId)
	{
		if (RoomTypes != null)
		{
			var roomtype = RoomTypes.First(q => q.Id == roomtypeId);

			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {roomtype.Description}?");

			if (confirm)
			{
				var bookingExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.BookingsEndpoint}/roomtype/{roomtypeId}");
				var roomExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.RoomsEndpoint}/roomtype/{roomtypeId}");

				if (bookingExists || roomExists)
				{
					if (bookingExists)
					{
						await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Bookings.");
					}
					if (roomExists)
					{
						await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Rooms.");
					}
					return;
				}
				else
				{
					await _client.DeleteAsync($"{Endpoints.RoomTypesEndpoint}/{roomtypeId}");
					await OnInitializedAsync();
				}
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#typesTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#typesTable");
		_interceptor.DisposeEvent();
	}
}