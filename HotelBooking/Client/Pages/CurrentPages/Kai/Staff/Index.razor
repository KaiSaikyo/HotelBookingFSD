@page "/staff/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<PageTitle>RoomScout.Org - Staffs</PageTitle>

@if (Staffs == null)
{
	<div class="alert alert-info">Loading Staffs...</div>
}
else
{
	<div class="main-background">
		<div class="button-wrapper">
			<a href="/staff/create" class="right-aligned-button nav-link">
				Create Staff
			</a>
		</div>
		<div class="table-background">
			<table class="table table-responsive" id="staffsTable">
				<thead>
					<tr>
						<th style="border-top-left-radius: 0.5rem;">ID</th>
						<th>Name</th>
						<th>Email</th>
						<th>Password</th>
						<th>Mobile</th>
						<th style="border-top-right-radius: 0.5rem;">Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var staff in Staffs)
					{
						<tr>
							<td><b>@staff.Id</b></td>
							<td><b>@staff.Name</b></td>
							<td><b>@staff.Email</b></td>
							<td><b>@staff.Password</b></td>
							<td><b>@staff.Mobile</b></td>

							<td>
								<div id="button-container" style="display: flex; flex-direction: row; gap: 0.2rem;">
									<a href="/staff/view/@staff.Id" class="btn btn-view">
										<span class="oi oi-magnifying-glass"></span>
									</a>

									<a href="/staff/edit/@staff.Id" class="btn btn-edit">
										<span class="oi oi-script"></span>
									</a>

									<button class="btn btn-delete" @onclick="@(()=>Delete(staff.Id))">
										<span class="oi oi-trash"></span>
									</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private List<Staff>? Staffs;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
	}

	async Task Delete(int staffId)
	{
		if (Staffs != null)
		{
			var staff = Staffs.First(q => q.Id == staffId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staff.Name}?");

			if (confirm)
			{
				var bookingExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.BookingsEndpoint}/staff/{staffId}");
				if (bookingExists)
				{
					await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Bookings.");
					return;
				}
				else
				{
					await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
					await OnInitializedAsync();
				}
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#staffsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#staffsTable");
		_interceptor.DisposeEvent();
	}
}