@page "/staff/create"
@using HotelBooking.Client.Components
@inject HttpClient _client
@inject NavigationManager _navManager

<PageTitle>RoomScout.Org - Create Staffs</PageTitle>

<div class="main-background">
	<div class="form-background">
		<EditForm Model="@staff" OnValidSubmit="CreateStaff">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">
				<label>Name: </label>
				<div>
					<InputText @bind-Value="@staff.Name" class="form-control" />
					<ValidationMessage For="@(() => staff.Name)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Email: </label>
				<div>
					<InputText @bind-Value="@staff.Email" class="form-control" />
					<ValidationMessage For="@(() => staff.Email)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Password: </label>
				<div>
					<InputText @bind-Value="@staff.Password" class="form-control" />
					<ValidationMessage For="@(() => staff.Password)" />
				</div>
			</div>
			<br />
			<div class="form-group">
				<label>Mobile: </label>
				<div>
					<InputText @bind-Value="@staff.Mobile" class="form-control" />
					<ValidationMessage For="@(() => staff.Mobile)" />
				</div>
			</div>
			<br />
			<div class="button-wrapper">
				<button type="submit" class="left-aligned-button">
					Create Staff
				</button>
			</div>
			<BackToList Target="staff" />
		</EditForm>
	</div>
</div>

@code {
	private Staff staff = new Staff();

	private async Task CreateStaff()
	{
		await _client.PostAsJsonAsync(Endpoints.StaffsEndpoint, staff);
		_navManager.NavigateTo("/staff/");
	}
}