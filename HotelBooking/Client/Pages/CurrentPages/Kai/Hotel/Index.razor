@page "/hotel"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<PageTitle>RoomScout.Org - Hotels</PageTitle>

@if (Hotels == null)
{
	<div class="alert alert-info">Loading Hotels...</div>
}
else
{
	<div class="main-background">
		<div class="button-wrapper">
			<a href="/hotel/create" class="right-aligned-button nav-link">
				Create Hotel
			</a>
		</div>
		<div class="table-background">
			<table class="table table-responsive" id="hotelsTable">
				<thead>
					<tr>
						<th style="border-top-left-radius: 0.5rem;">ID</th>
						<th>Hotel</th>
						<th>Address</th>
						<th>Description</th>
						<th>Amenities</th>
						<th>Rating</th>
						<th>Availability</th>
						<th style="border-top-right-radius: 0.5rem;">Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var hotel in Hotels)
					{
						<tr>
							<td><b>@hotel.Id</b></td>
							<td><b>@hotel.Name</b><br /><img src="@hotel.ImagePath" alt="Uploaded Img" class="scaled-image" /></td>
							<td><b>@hotel.Address</b></td>
							<td><b>@hotel.Description</b></td>
							<td><b>@hotel.Amenities</b></td>
							<td><b>@hotel.Rating</b></td>
							<td><b>@hotel.Availability</b></td>

							<td>
								<div id="button-container" style="display: flex; flex-direction: row; gap: 0.2rem;">
									<a href="/hotel/view/@hotel.Id" class="btn btn-view">
										<span class="oi oi-magnifying-glass"></span>
									</a>

									<a href="/hotel/edit/@hotel.Id" class="btn btn-edit">
										<span class="oi oi-script"></span>
									</a>

									<button class="btn btn-delete" @onclick="@(()=>Delete(hotel.Id))">
										<span class="oi oi-trash"></span>
									</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private List<Hotel>? Hotels;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Hotels = await _client.GetFromJsonAsync<List<Hotel>>($"{Endpoints.HotelsEndpoint}");
	}

	async Task Delete(int hotelId)
	{
		if (Hotels != null)
		{
			var hotel = Hotels.First(q => q.Id == hotelId);

			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {hotel.Name}?");

			if (confirm)
			{
				var bookingExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.BookingsEndpoint}/hotel/{hotelId}");
				var roomtypeExists = await _client.GetFromJsonAsync<bool>($"{Endpoints.RoomTypesEndpoint}/hotel/{hotelId}");

				if (bookingExists || roomtypeExists)
				{
					if (bookingExists)
					{
						await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Bookings.");
					}
					if (roomtypeExists)
					{
						await js.InvokeAsync<bool>("confirm", $"You currently have an existing ID in Room Types.");
					}
					return;
				}
				else
				{
					await _client.DeleteAsync($"{Endpoints.HotelsEndpoint}/{hotelId}");
					await OnInitializedAsync();
				}
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#hotelsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#hotelsTable");
		_interceptor.DisposeEvent();
	}
}