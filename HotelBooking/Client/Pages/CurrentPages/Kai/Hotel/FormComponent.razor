@using HotelBooking.Client.Components

<PageTitle>RoomScout.Org - Update Hotels</PageTitle>

<div class="main-background">
    <div class="form-background">
        <EditForm Model="@hotel" OnValidSubmit="@OnValidSubmitHandler">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(ImagePath))
            {
                <div class="form-group">
                    <label>Uploaded Image: </label>
                    <div>
                        <img src="@ImagePath" alt="Uploaded Image" style="max-width: 300px; max-height: 300px;" />
                    </div>
                </div>
            }

            <fieldset disabled="@Disabled">
                <div class="form-group">
                    <label>Upload Image: </label>
                    <div>
                        <InputFile OnChange="@HandleFileUpload" class="form-control" accept="image/*" />
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label>Name: </label>
                    <div>
                        <InputText @bind-Value="@hotel.Name" class="form-control" />
                        <ValidationMessage For="@(() => hotel.Name)" />
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label>Address: </label>
                    <div>
                        <InputTextArea @bind-Value="@hotel.Address" class="form-control" />
                        <ValidationMessage For="@(() => hotel.Address)" />
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label>Description: </label>
                    <div>
                        <InputTextArea @bind-Value="@hotel.Description" class="form-control" />
                        <ValidationMessage For="@(() => hotel.Description)" />
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label>Amenities: </label>
                    <div>
                        <InputTextArea @bind-Value="@hotel.Amenities" class="form-control" />
                        <ValidationMessage For="@(() => hotel.Amenities)" />
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label>Rating: </label>
                    <div>
                        <InputNumber @bind-Value="@hotel.Rating" class="form-control" />
                        <ValidationMessage For="@(() => hotel.Rating)" />
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label>Availability: </label>
                    <div>
                        <InputSelect @bind-Value="@hotel.Availability" class="form-control">
                            <option value="">-- Select Availability --</option>
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => hotel.Availability)" />
                    </div>
                </div>
            </fieldset>

            @if (!Disabled)
            {
                <br />
                <div class="button-wrapper">
                    <button type="submit" class="left-aligned-button">
                        @ButtonText
                    </button>
                </div>
            }
            <BackToList Target="hotel" />
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Hotel? hotel { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    private string ImagePath;

    private async Task OnValidSubmitHandler()
    {
        if (!string.IsNullOrEmpty(ImagePath))
        {
            hotel.ImagePath = ImagePath;
        }

        await OnValidSubmit.InvokeAsync(); // Invoke the provided callback
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Read the file stream and convert it to base64 string
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                var imageDataBytes = memoryStream.ToArray();
                var imageDataString = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageDataBytes)}";

                ImagePath = imageDataString;
            }
        }
    }
}